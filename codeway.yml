# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool: 'CodeWayAWSLinux'

steps:
- task: CmdLine@2
  displayName: Install NPM
  inputs:
    script: 'sudo yum install -y gcc-c++ make && curl -sL https://rpm.nodesource.com/setup_13.x | sudo -E bash - && sudo yum install -y nodejs && node -v  && npm -v'
#- task: Npm@1
#  displayName: npm install
#  inputs:
#    command: 'install'
#    workingDir: 'buildAndReleaseTask'

# TFX - Node CLI for Azure DevOps (TFS Cross Platform Command Line Interface) 
- task: CmdLine@2
  displayName: Globally install TFX
  inputs:
    script: 'sudo npm i -g tfx-cli'
- task: CmdLine@2
  displayName: tfx extension create
  inputs:
    script: 'tfx extension create --manifest-globs vss-extension.json'
- task: CopyFiles@2
  displayName: Copy VSIX to artifact staging directory
  inputs:
    Contents: '*vsix'
    TargetFolder: '$(build.artifactstagingdirectory)'
- task: PublishBuildArtifacts@1
  displayName: Publish VSIX as artifact
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  # Assume the account IAM role with privileges to provision the infrastructure
- template: /steps/aws-assumerole-v0.yaml
  parameters:
    roleARN: ${roleArn}
    #externalId: ${{parameters.externalId}}
    sessionDuration: '3600'
- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: |
      import json
      import boto3
      import random

      cloudwatch = boto3.client('cloudwatch')
      rand_value = random.randint(1, 500)
      response = cloudwatch.put_metric_data(
      MetricData = [
          {
              'MetricName': 'CodeWayPOCQueueTime',
              'Dimensions': [
                  {
                      'Name': 'CodeWayBuildQueueMonitoring',
                      'Value': 'BuildQueueDelayInSeconds'
                  },
              ],
              'Unit': 'Seconds',
              'Value': rand_value
          },
      ],
      Namespace = 'CodeWayBuildTime'
      )
      print ("Build Delay in second",rand_value)
      print (response)
      return {
          'statusCode': 200,
          'body': json.dumps('Test Successful!')
      }
